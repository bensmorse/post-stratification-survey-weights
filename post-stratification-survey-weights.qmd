---
title: "Post-stratification Weighting to Recover Representative Estimates from Selective Samples"
format: html
execute:
  warning: false
---

```{r}
#| warning: false
#| include: false

# load packages
library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyquant)
library(magrittr) 
library(dplyr)

library(Synth)
library(SCtools)
library(skimr)
library(zoo)
library(lubridate)
library(dplyr)
library(tidysynth)
library(janitor)
library(flextable)
library(RColorBrewer)
library(gt)
library(kableExtra)


```

## Motivation

A gold standard methodology in survey-based research is probability sampling in which people are contacted and surveyed at random from a list of the population. But strict adherance to probability sampling is seldom possible in the real world. For starters, response rates for surveys are often well below 10 percent, and respondents who answer and agree to participate are a selective sample that is likely to differ from the general population in terms of their demographic and socio-economic characteristics. Moreover, in many settings, there is no sampling frame or readily-available list of the population from which to sample. The end result is that the sample of respondents in the survey may look nothing like the general population that the researcher is interested in.

The challenge of generalizing findings from a selective sample to a larger population is not unique to survey research. Medical studies  often involve intensive recruitment protocols in which only a selective subset of eligible patients are enrolled. And in tech, UX researchers often conduct feedback surveys or A/B tests on convenience samples whose characteristics differ from those of their user base.   

In these and many other settings, researchers can use a procedure known as post-stratification weighting to recover representative estimates. While the algorithm is complicated, the idea is simple: identify a set of weights such that the weighted sample matches the reference population in terms of its average demographic make-up and other variables of interest. Assuming these weights capture all the sources of confounding between the sample and reference population, analysis on the weighted sample will be unbiased.   

<!--- The idea is to algorithmically identify a set of weights such that the weighted marginal distributions for key demographic variables in our sample match the distributions of Haiti's actual population. --->
<!---  to do: footnote with comparison to post-stratification weighting and design weights --->
<!--- At the analysis phase, weighting can help medical researchers generalize from clinical sample to the broader patient population of interest. --->


### Use Case: Random Digit Dialing Phone Survey in Haiti

In 2024, the U.S. State Department commissioned a [phone survey in Haiti](https://www.state.gov/wp-content/uploads/2025/06/Report-Eval-of-Activities-from-the-Global-Fragility-Act-H-Report_006042-Accessible-6.5.2025.pdf) to better understand socio-economic and humanitarian outcomes in the country. The survey was administered by between October 28 and December 12, 2024 and relied on a random-digit-dialing (RDD) approach to contact and survey respondents. The use of RDD implies several sources of selection: 1) having a working phone, 2) answering the phone, and 3) consenting to the survey. Indeed, of the more than 30,000 call attempts, only 6,112 were answered.

```{r}
#| echo: false
#| warning: false

data <- read_csv("data\\Haiti_Survey_Data_DeID.csv")

data |> 
  mutate(disposition = case_when(call_disposition==0 ~ "answered",
                                 call_disposition==1 ~ "rings busy",
                                 call_disposition==2 ~ "blocked",
                                 call_disposition==3 ~ "no answer",
                                 call_disposition==4 ~ "voicemail",
                                 call_disposition==5 ~ "business",
                                 call_disposition==6 ~ "does not exist",
                                 call_disposition==7 ~ "not active",
                                 call_disposition==-77 ~ "other")) |>
  group_by(disposition) |>
  count() |>
  flextable()


```

And of the 6,112 answered calls, 3,144 (51 percent) were met with a consenting respondent:

```{r}
#| echo: false


data |> 
  filter(call_disposition == 0) |>
  mutate(consent = replace_na(consent, 0)) |> 
  group_by(consent) |> 
  count() |>
  flextable()

```



```{r}
#| include: false
#| label: load-and-clean-data

data <- read_csv("data\\Haiti_Survey_Data_DeID.csv")

#######################
# clean data --------------------------------------
#######################


# limit data to those who consented

data <- data |> 
  filter(consent == 1) 


# Miscellaneous cleaning

data <- data |>
  mutate(age = replace(age, age<0, NA)) |>
  rename("hnp_satisfaction" = "hnp_satisfication", # rename misspelled variables 
         "tribunals_timely" = "tribuinals_timely",
         "tribunals_independent" = "tribuinals_independent",
         "oq_security_threat" = "oq_secruity_threat") %>%
  filter(is.na(age) != TRUE & is.na(education) != TRUE) # drops 17 obs with considerable missingness throughout


# Construct demographic vars & vars for post-stratification weighting 

median_educ = median(data$education, na.rm = T)

data <- data %>% 
  mutate(youth = if_else(age < 3, 1, 0), # dummy for youth (USAID definition: youth < 30 years of age)
         educ_above_p50 = if_else(education > median_educ, 1, 0), # dummy for education (above or below median)
         Gender = if_else(gender==1, "Female","Male"),
         region = case_when(
           department == "Nord" | department == "Nord-Est" | department == "Nord-Ouest" ~ "North",
           department == "Ouest" ~ "West",
           department == "Centre" | department == "Artibonite" ~ "Center",
           department == "Sud" | department == "Sud-Est" | department == "Nippes" | department == "GrandAnse" ~ "South"
         ),
         # construct variables for post-stratification weighting
         # that exactly match construction for AB2021 survey (our reference population)
         # note -- need to confirm how LB defined "Metropolitan area" and "Rest of West"
         # Kesly recommends defining PauP as to include: Port-au-Prince, Croix-des-bouquets, Carrefour, Petion Ville, Delmas, Tabarre
         Strata = case_when(
           department == "Nord" | department == "Nord-Est" | department == "Nord-Ouest" ~ "Northern",
           department == "Ouest" & subcommune == 34 ~ "Metropolitan area", # subcommune/arondissement 34 denotes port au prince
           department == "Ouest" & subcommune != 34 ~ "Rest of West", # subcommune/arondissement 34 denotes port au prince
           department == "Centre" | department == "Artibonite" ~ "Central",
           department == "Sud" | department == "Sud-Est" | department == "Nippes" | department == "GrandAnse" ~ "Southern"
         ),
         Age = case_when(
           age == 1 ~ "18 to 25",
           age == 2 ~ "26 to 35",
           age == 3 | age == 4 ~ "36 to 65", # need to collapse these b/c Latinobarometer measures 36-45, 46-55, and 56-65
           age == 5 ~ "65+"
         ),
         Education = case_when(
           education == 0 | education == -97 ~ "None",
           education == 1 | education == 2 ~ "Primary",
           education == 3 | education == 4 ~ "Secondary",
           education == 5 | education == 6 | education == 7 | education == 8 ~ "University"
         )
  )


```

## Weighting Algorithm

The goal is to identify a set weights such that the weighted marginal distributions for key demographic variables in our sample match the distributions of Haiti's actual population.

To do this, we need reference distributions for these variables that constitute our best estimate of Haiti's actual population distributions. For this, we'll use the weighted sample distributions in listed in Table 1 of the [technical appendix](https://www.vanderbilt.edu/lapop/haiti/ABHTI2021-Technical-Report-v1.0-FINAL-eng-110921.pdf) for the Latinobarometer's 2021 Haiti survey, which which was weighted to represent Haiti's population based on census data they were able to access in country.


Now that we have our reference distributions, we use the [rake command](https://www.rdocumentation.org/packages/survey/versions/4.4-2/topics/rake) in R to identify post-stratification weights. The rake command uses an Iterative Proportional Fiting (IPF) algorithm to identify weights that produce marginal distributions that match the reference population. See [here](https://www.r-bloggers.com/2014/04/survey-computing-your-own-post-stratification-weights-in-r/) for a helpful tutorial on this procedure, or click the code-fold for line-by-line annotation.

<!-- helpful reference: https://www.r-bloggers.com/2014/04/survey-computing-your-own-post-stratification-weights-in-r/ -->

<!-- also helpful: https://r-survey.r-forge.r-project.org/survey/wnar-calibrate.pdf -->

<!-- https://www.pewresearch.org/decoded/2020/03/26/weighting-survey-data-with-the-pewmethods-r-package/ -->

<!-- https://statmodeling.stat.columbia.edu/2024/01/24/resources-for-teaching-and-learning-survey-sampling-from-scott-keeter-at-pew-research/ -->

```{r}
#| warning: false
#| message: false
#| code-fold: true


library(survey)

# define data as survey data without weights
data.svy.unweighted <- svydesign(ids=~1, data=data)

# define marginal distributions using weighted sample summarized in Table 1 2021 Haiti Latinobarometer weighted sample, p. 4-5
# https://www.vanderbilt.edu/lapop/haiti/ABHTI2021-Technical-Report-v1.0-FINAL-eng-110921.pdf

Gender.dist <- data.frame(Gender = c("Female", "Male"),
                          Freq = nrow(data)*c(1563/3088,1525/3088))

Strata.dist <- data.frame(Strata = c("Metropolitan area", "Northern", "Central", "Rest of West", "Southern"),
                          Freq = nrow(data)*c(650/2605, 491/2605, 584/2605, 385/2605, 495/2605))

Age.dist <-data.frame(Age = c("18 to 25", "26 to 35", "36 to 65", "65+"),
                      Freq = nrow(data)*c(743/3088, 808/3088, (583+549+257)/3088, 148/3088)) 

Education.dist <- data.frame(Education = c("None", "Primary", "Secondary", "University"),
                       Freq = nrow(data)*c(194/2910, 459/2910, 1894/2910, 363/2910))


# identify weights using IPF algorithm
data.svy.rake <- rake(design = data.svy.unweighted,
                       sample.margins = list(~Gender, ~Strata, ~Age, ~Education),
                       population.margins = list(Gender.dist, Strata.dist, Age.dist, Education.dist))

# check distribution of weights

#summary(weights(data.svy.rake)) 

# Create a summary data frame of the weights
weights_summary <- data.frame(
  statistic = names(summary(weights(data.svy.rake))),
  value = round(as.numeric(summary(weights(data.svy.rake))), digits = 2)
)

weights_summary |>
  gt() |>
  tab_header(title = "Distribution of Weights")


# trim weights to avoid overly small or large weights (to avoid overextrapolation)

data.svy.rake.trim <- trimWeights(data.svy.rake, lower=0.2, upper=5, strict=TRUE) 

# define weight variable based on raking

data$weight <- weights(data.svy.rake.trim)


```

## Results

Now we can compare the weighted and unweighted samples. The marginal distributions for the weighted sample closely match those of the weighted sample in the 2021 LAPOP Haiti survey.

```{r}
#| warning: false
#| code-fold: true


# calculated weighted demographics & compare to unweighted
# weighted demographics match those of Latinobarometer Haiti 2021

weighted_demographics <- data %>% 
  summarize(
    sample_size = nrow(data),
    #Gender
    female = weighted.mean(gender==1, weight, na.rm=TRUE), 
    #Age
    age_18_25 = weighted.mean(age==1, weight, na.rm=TRUE),
    age_26_35 = weighted.mean(age==2, weight, na.rm=TRUE),
    age_36_50 = weighted.mean(age==3, weight, na.rm=TRUE),
    age_51_65 = weighted.mean(age==4, weight, na.rm=TRUE),
    age_over65 = weighted.mean(age==5, weight, na.rm=TRUE),
    # Strata
    strata_metropolitan_area = weighted.mean(Strata=="Metropolitan area", weight, na.rm=TRUE),
    strata_north = weighted.mean(Strata=="Northern", weight, na.rm=TRUE),
    strata_central = weighted.mean(Strata=="Central", weight, na.rm=TRUE),
    strata_rest_of_west = weighted.mean(Strata=="Rest of West", weight, na.rm=TRUE),
    strata_southern = weighted.mean(Strata=="Southern", weight, na.rm=TRUE),
    #Education
    No_edu = weighted.mean(Education == "None", weight, na.rm=TRUE),
    Primary = weighted.mean(Education == "Primary", weight, na.rm=TRUE),
    Secondary = weighted.mean(Education == "Secondary", weight, na.rm=TRUE),
    University = weighted.mean(Education == "University", weight, na.rm=TRUE),
  ) %>% 
  round(2)


# unweighted demographics

unweighted_demographics <- data %>% 
  summarize(
    sample_size = nrow(data),
    #Gender
    prop_female = mean(gender==1, na.rm=TRUE), 
    #Age
    age_18_25 = mean(age==1, na.rm=TRUE),
    age_26_35 = mean(age==2, na.rm=TRUE),
    age_36_50 = mean(age==3, na.rm=TRUE),
    age_51_65 = mean(age==4, na.rm=TRUE),
    age_over65 = mean(age==5, na.rm=TRUE),
    # Strata
    strata_metropolitan_area = mean(Strata=="Metropolitan area", na.rm=TRUE),
    strata_north = mean(Strata=="Northern", na.rm=TRUE),
    strata_central = mean(Strata=="Central", na.rm=TRUE),
    strata_rest_of_west = mean(Strata=="Rest of West", na.rm=TRUE),
    strata_southern = mean(Strata=="Southern", na.rm=TRUE),
    #Education
    no_edu = mean(Education == "None", na.rm=TRUE),
    Primary = mean(Education == "Primary", na.rm=TRUE),
    Secondary = mean(Education == "Secondary", na.rm=TRUE),
    University = mean(Education == "University", na.rm=TRUE),
  ) %>% 
  round(2)


unweighted_demographics <- gather(unweighted_demographics, varname, unweighted, 1:length(unweighted_demographics)) %>%
  select(unweighted)


demographics_out <- weighted_demographics %>%
  gather(., varname, weighted, 1:length(weighted_demographics)) %>%
  bind_cols(unweighted_demographics)

demographics_out |>
  gt() |>
  tab_header(title = "Weighted vs. Unweighted Sample Demographics")


```

Which we can visualize as follows:

```{r}
#| code-fold: true
#| label: fig-weighted-unweighted-demographics


demographics_out |>
  # Remove sample_size row since it's not a proportion
  filter(varname != "sample_size") |>
  # Pivot to long format for ggplot
  pivot_longer(cols = c(weighted, unweighted), 
               names_to = "sample_type", 
               values_to = "proportion") |>
  # Create the plot
  ggplot(aes(x = varname, y = proportion, fill = sample_type)) +
  geom_col(position = "dodge", width = 0.7) +
  scale_fill_manual(values = c("weighted" = "#2E86AB", "unweighted" = "#A23B72"),
                    labels = c("Weighted", "Unweighted")) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Weighted vs. Unweighted Sample Demographics",
    subtitle = "Comparison of demographic proportions before and after post-stratification weighting",
    x = "Demographic Variables",
    y = "Proportion",
    fill = "Sample Type"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom",
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray60")
  )


```


## Substantive Analysis


```{r}
#| include: false
#| code-fold: true

# construct variables of interest

data <- data |>
  mutate(
    no_food_3m_dum = if_else(no_food_3m == 1, 1, 0),
    trust_govt_dum = if_else(trust_govt >= 4, 1, 0),
    employed_dum = if_else(employment == 3, 1, 0),
    family_migrate_dum = if_else(family_migrate_next12m == 2 | family_migrate_next12m == 3, 1, 0)
  )

# Function to calculate weighted standard errors for binary variables
weighted_se <- function(x, weights) {
  p <- weighted.mean(x, weights, na.rm = TRUE)
  n_eff <- sum(weights[!is.na(x)])^2 / sum(weights[!is.na(x)]^2)
  sqrt(p * (1 - p) / n_eff)
}

# Calculate means and confidence intervals for all four variables
substantive_analysis <- data |>
  summarize(
    across(c(trust_govt_dum, employed_dum, no_food_3m_dum, family_migrate_dum),
           list(
             unweighted_mean = ~mean(.x, na.rm = TRUE),
             unweighted_se = ~sqrt(mean(.x, na.rm = TRUE) * (1 - mean(.x, na.rm = TRUE)) / sum(!is.na(.x))),
             weighted_mean = ~weighted.mean(.x, weight, na.rm = TRUE),
             weighted_se = ~weighted_se(.x, weight)
           ))
  ) |>
  # Reshape for easier handling
  pivot_longer(everything(), names_to = "variable", values_to = "value") |>
  separate(variable, into = c("var_name", "statistic"), sep = "_(?=unweighted|weighted)") |>
  pivot_wider(names_from = statistic, values_from = value) |>
  # Calculate confidence intervals
  mutate(
    unweighted_ci_lower = unweighted_mean - 1.96 * unweighted_se,
    unweighted_ci_upper = unweighted_mean + 1.96 * unweighted_se,
    weighted_ci_lower = weighted_mean - 1.96 * weighted_se,
    weighted_ci_upper = weighted_mean + 1.96 * weighted_se,
    # Clean variable names
    variable = case_when(
      var_name == "trust_govt_dum" ~ "Trusts Government",
      var_name == "employed_dum" ~ "Employed",
      var_name == "no_food_3m_dum" ~ "Skipped Meals (Past 3 Months)",
      var_name == "family_migrate_dum" ~ "Plans to Migrate"
    )
  )

# Create summary table
results_table <- substantive_analysis |>
  select(variable, 
         unweighted_mean, unweighted_ci_lower, unweighted_ci_upper,
         weighted_mean, weighted_ci_lower, weighted_ci_upper) |>
  mutate(
    unweighted_ci = paste0("[", round(unweighted_ci_lower, 3), ", ", round(unweighted_ci_upper, 3), "]"),
    weighted_ci = paste0("[", round(weighted_ci_lower, 3), ", ", round(weighted_ci_upper, 3), "]")
  ) |>
  select(Variable = variable,
         `Unweighted Mean` = unweighted_mean,
         `Unweighted 95% CI` = unweighted_ci,
         `Weighted Mean` = weighted_mean,
         `Weighted 95% CI` = weighted_ci) |>
  mutate(
    `Unweighted Mean` = round(`Unweighted Mean`, 3),
    `Weighted Mean` = round(`Weighted Mean`, 3)
  )

results_table |>
  gt() |>
  tab_header(title = "Outcomes in Weighted vs. Unweighted Samples")


```


How does the use of post-stratification weights affect our results? @fig-weighted-unweighted-means shows the weighted versus unweighted means for four key outcome variables --- employed, plans to migrate to the U.S. in the next year, experiencing food insecurity, and trusts the Haitian government. As it turns out, the weighted vs. unweighted means are broadly similar, suggesting that the sources of selection into our sample (summarized in @fig-weighted-unweighted-demographics) are not strong determinants of our outcomes of interest and thus not particularly consequential. But there was no ex-ante guarantee that this would be the case. 


```{r}
#| code-fold: true
#| label: fig-weighted-unweighted-means

library(ggplot2)

# Prepare data for plotting
plot_data <- substantive_analysis |>
  select(variable, unweighted_mean, unweighted_ci_lower, unweighted_ci_upper,
         weighted_mean, weighted_ci_lower, weighted_ci_upper) |>
  pivot_longer(cols = -variable, names_to = "measure", values_to = "value") |>
  separate(measure, into = c("weight_type", "statistic"), sep = "_(?=mean|ci)") |>
  pivot_wider(names_from = statistic, values_from = value) |>
  mutate(
    weight_type = case_when(
      weight_type == "unweighted" ~ "Unweighted",
      weight_type == "weighted" ~ "Weighted"
    )
  )

# Create the plot
comparison_plot <- ggplot(plot_data, aes(x = variable, y = mean, color = weight_type)) +
  geom_point(position = position_dodge(width = 0.3), size = 3) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(width = 0.3), width = 0.2) +
  labs(
    title = "Weighted vs Unweighted Estimates with 95% Confidence Intervals",
    subtitle = "Haiti Survey Data - Key Outcome Variables",
    x = "Variable",
    y = "Proportion",
    color = "Estimation Method"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  ) +
  scale_color_manual(values = c("Unweighted" = "#E31A1C", "Weighted" = "#1F78B4"))

print(comparison_plot)


```
